generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  editor
  viewer
}

model Hospital {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User[]
  homeLayout HomeLayout?
}

model User {
  id          String    @id @default(cuid())
  name        String?
  email       String?   @unique
  emailVerified DateTime?
  image       String?
  role        Role      @default(viewer)
  hashedPassword String?
  hospitalId  String
  hospital    Hospital  @relation(fields: [hospitalId], references: [id])

  accounts Account[]
  sessions Session[]

  createdContents  ContentPiece[] @relation("ContentCreatedBy")
  createdCollections Collection[] @relation("CollectionCreatedBy")
  createdCards     Card[] @relation("CardCreatedBy")
  auditLogs        AuditLog[] @relation("AuditActor")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CardType {
  content
  collection
}

model ContentPiece {
  id        String   @id @default(cuid())
  title     String
  kind      String   // 'article'|'video'|'pdf'|'quiz'|'link'|'note'
  body      String?
  mediaUrl  String?
  metadata  Json?
  tags      Json?
  deletedAt DateTime?

  createdById String
  createdBy   User     @relation("ContentCreatedBy", fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards Card[]
}

model Collection {
  id          String   @id @default(cuid())
  title       String
  description String?
  itemIds     Json     // array of ContentPiece ids (or nested collection ids)
  tags        Json?
  deletedAt   DateTime?

  createdById String
  createdBy   User     @relation("CollectionCreatedBy", fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cards Card[]
}

model Card {
  id           String   @id @default(cuid())
  title        String
  description  String?
  type         CardType
  contentId    String?
  content      ContentPiece? @relation(fields: [contentId], references: [id])
  collectionId String?
  collection   Collection?   @relation(fields: [collectionId], references: [id])
  icon         String?
  layout       Json           // { w: number; h: number }
  order        Int            // position in home screen
  visible      Boolean        @default(true)
  tags         Json?

  createdById String
  createdBy   User   @relation("CardCreatedBy", fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id           String   @id @default(cuid())
  name         String
  description  String?
  payload      Json     // { cards: Card[]; contents: ContentPiece[]; collections: Collection[] }
  tags         Json?
  thumbnailUrl String?
}

model HomeLayout {
  id               String   @id @default(cuid())
  hospitalId       String   @unique
  hospital         Hospital @relation(fields: [hospitalId], references: [id])
  cardIds          Json     // ordered array of card ids
  version          Int      @default(1)
  publishedVersion Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

}

model LayoutVersion {
  id          String   @id @default(cuid())
  hospitalId  String
  version     Int
  snapshot    Json     // { cards, contents, collections, layout }
  createdAt   DateTime @default(now())

  @@unique([hospitalId, version])
}

model AuditLog {
  id          String   @id @default(cuid())
  actorId     String
  actor       User     @relation("AuditActor", fields: [actorId], references: [id])
  hospitalId  String
  action      String
  entityType  String
  entityId    String
  diff        Json?
  createdAt   DateTime @default(now())
}


